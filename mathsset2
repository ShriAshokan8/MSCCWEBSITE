<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Path of Doors: Ultimate Challenge</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background: linear-gradient(45deg, #ff0000, #00ff00, #0000ff, #ff00ff, #ffff00);
      background-size: 400% 400%;
      animation: rainbowBG 8s infinite;
      color: #fff;
      text-align: center;
    }

    @keyframes rainbowBG {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    h1 {
      margin-top: 20px;
      font-size: 3rem;
      text-shadow: 3px 3px 10px #000;
    }

    h2 {
      font-size: 2rem;
      margin: 20px 0;
    }

    /* Progress Tracker */
    .tracker {
      margin: 20px auto;
      font-size: 1.2rem;
      font-weight: bold;
      background: rgba(0, 0, 0, 0.5);
      padding: 10px 20px;
      border-radius: 10px;
      width: fit-content;
      color: #fff;
    }

    /* Door Container */
    .doors {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      margin: 30px auto;
      max-width: 900px;
    }

    .door {
      margin: 10px;
      padding: 20px;
      border-radius: 10px;
      width: 100px;
      height: 150px;
      background: linear-gradient(45deg, #444, #111);
      color: white;
      font-weight: bold;
      font-size: 18px;
      text-align: center;
      cursor: pointer;
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .door:hover {
      transform: scale(1.1);
      box-shadow: 0 8px 15px rgba(0, 0, 0, 0.5);
    }

    /* Correct door animation */
    .correct {
      animation: glow 1s infinite;
    }

    @keyframes glow {
      0%, 100% { box-shadow: 0 0 10px #00ff00; }
      50% { box-shadow: 0 0 20px #00ff00; }
    }

    /* Button */
    button {
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background: linear-gradient(45deg, #ff4500, #ff6347);
      color: white;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    button:hover {
      transform: scale(1.1);
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }

    .hidden {
      display: none;
    }

    /* Mobile responsiveness */
    @media (max-width: 600px) {
      .doors {
        flex-wrap: wrap;
      }
      .door {
        width: 80px;
        height: 120px;
        font-size: 14px;
      }
    }
  </style>
</head>
<body>
  <h1>Path of Doors: Retry Limit!</h1>
  <h2 id="question">Press Start to Begin!</h2>

  <!-- Progress Tracker -->
  <div class="tracker">
    <p id="progress">Question: 0 of 20</p>
    <p id="correct-count">Correct: 0</p>
    <p id="wrong-count">Wrong: 0</p>
  </div>

  <!-- Door Options -->
  <div class="doors hidden" id="doors-container"></div>

  <!-- Buttons -->
  <button id="start-button">Start</button>
  <button id="next-button" class="hidden">Next Question</button>
  <button id="retry-button" class="hidden">Retry</button>
  <button id="skip-button" class="hidden">Skip</button>

  <script>
    const questionElement = document.getElementById("question");
    const doorsContainer = document.getElementById("doors-container");
    const startButton = document.getElementById("start-button");
    const nextButton = document.getElementById("next-button");
    const retryButton = document.getElementById("retry-button");
    const skipButton = document.getElementById("skip-button");
    const progressElement = document.getElementById("progress");
    const correctCountElement = document.getElementById("correct-count");
    const wrongCountElement = document.getElementById("wrong-count");

    const totalQuestions = 20;
    let currentQuestionIndex = 0;
    let correctAnswer = null;
    let correctCount = 0;
    let wrongCount = 0;
    let attempts = 0; // Track the number of attempts per question

    // Start the game
    startButton.addEventListener("click", () => {
      startButton.classList.add("hidden");
      generateQuestion();
    });

    // Proceed to the next question
    nextButton.addEventListener("click", () => {
      currentQuestionIndex++;
      attempts = 0; // Reset attempts for the next question
      nextButton.classList.add("hidden");
      skipButton.classList.add("hidden");
      if (currentQuestionIndex === totalQuestions - 1) {
        generateFinalQuestion();
      } else if (currentQuestionIndex === totalQuestions) {
        questionElement.textContent = "ðŸŽ‰ Congratulations! You've completed the challenge!";
        doorsContainer.classList.add("hidden");
      } else {
        generateQuestion();
      }
    });

    // Retry the current question
    retryButton.addEventListener("click", () => {
      retryButton.classList.add("hidden");
      showDoors();
    });

    // Skip the question after 3 failed attempts
    skipButton.addEventListener("click", () => {
      currentQuestionIndex++;
      attempts = 0; // Reset attempts
      skipButton.classList.add("hidden");
      nextButton.classList.add("hidden");
      generateQuestion();
    });

    // Generate a random math question for normal levels
    function generateQuestion() {
      const num1 = Math.floor(Math.random() * 10) + 1;
      const num2 = Math.floor(Math.random() * 10) + 1;
      const operation = ["+", "-", "*"][Math.floor(Math.random() * 3)];
      correctAnswer = calculateAnswer(num1, num2, operation);
      updateProgress();
      questionElement.textContent = `Level ${currentQuestionIndex + 1}: What is ${num1} ${operation} ${num2}?`;
      showDoors(4); // 4 doors for normal questions
    }

    // Generate the final question
    function generateFinalQuestion() {
      const num1 = Math.floor(Math.random() * 50) + 10;
      const num2 = Math.floor(Math.random() * 20) + 5;
      const num3 = Math.floor(Math.random() * 10) + 2;
      correctAnswer = (num1 + num2) * num3;
      questionElement.textContent = `Final Level: What is (${num1} + ${num2}) Ã— ${num3}?`;
      showDoors(12); // 12 doors for the final question
    }

    // Show doors with answers
    function showDoors(doorCount) {
      doorsContainer.innerHTML = "";
      doorsContainer.classList.remove("hidden");

      const answers = generateAnswers(correctAnswer, doorCount);
      answers.forEach(answer => {
        const door = document.createElement("div");
        door.className = "door";
        door.textContent = answer;
        door.addEventListener("click", () => checkAnswer(answer, door));
        doorsContainer.appendChild(door);
      });
    }

    // Check the player's answer
    function checkAnswer(answer, door) {
      if (answer === correctAnswer) {
        correctCount++;
        attempts = 0; // Reset attempts
        updateProgress();
        door.classList.add("correct");
        questionElement.textContent = "Correct! Proceeding to the next question...";
        nextButton.classList.remove("hidden");
      } else {
        attempts++;
        wrongCount++;
        updateProgress();
        questionElement.textContent = `Wrong answer! Attempts: ${attempts} of 3`;
        if (attempts >= 3) {
          skipButton.classList.remove("hidden");
        } else {
          retryButton.classList.remove("hidden");
        }
      }
    }

    // Update progress tracker
    function updateProgress() {
      progressElement.textContent = `Question: ${currentQuestionIndex + 1} of ${totalQuestions}`;
      correctCountElement.textContent = `Correct: ${correctCount}`;
      wrongCountElement.textContent = `Wrong: ${wrongCount}`;
    }

    // Generate random answers including the correct one
    function generateAnswers(correctAnswer, doorCount) {
      const answers = new Set();
      answers.add(correctAnswer); // Add the correct answer
      while (answers.size < doorCount) {
        const randomAnswer = Math.floor(Math.random() * 100) + 1;
        answers.add(randomAnswer);
      }
      return Array.from(answers).sort(() => Math.random() - 0.5); // Shuffle answers
    }

    // Calculate the correct answer based on the operation
    function calculateAnswer(num1, num2, operation) {
      switch (operation) {
        case "+":
          return num1 + num2;
        case "-":
          return num1 - num2;
        case "*":
          return num1 * num2;
        default:
          throw new Error("Invalid operation");
      }
    }
  </script>
</body>
</html>
